// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Regix.AppInfra;

#nullable disable

namespace Regix.AppBack.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250818162003_NewPatient3DB")]
    partial class NewPatient3DB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Regix.Domain.EntitesSoftSec.Usuario", b =>
                {
                    b.Property<int>("UsuarioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UsuarioId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("CorporationId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FullName")
                        .HasMaxLength(101)
                        .HasColumnType("nvarchar(101)");

                    b.Property<string>("Job")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Nro_Document")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeDocument")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.HasKey("UsuarioId");

                    b.HasIndex("CorporationId");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.HasIndex("FullName", "Nro_Document", "CorporationId")
                        .IsUnique()
                        .HasFilter("[FullName] IS NOT NULL");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("Regix.Domain.EntitesSoftSec.UsuarioRole", b =>
                {
                    b.Property<int>("UsuarioRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UsuarioRoleId"));

                    b.Property<int>("CorporationId")
                        .HasColumnType("int");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("UsuarioRoleId");

                    b.HasIndex("CorporationId");

                    b.HasIndex("UsuarioId", "UserType")
                        .IsUnique();

                    b.ToTable("UsuarioRoles");
                });

            modelBuilder.Entity("Regix.Domain.Entities.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CityId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .UseCollation("Latin1_General_CI_AS");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.HasKey("CityId");

                    b.HasIndex("CityId");

                    b.HasIndex("StateId");

                    b.HasIndex("Name", "StateId")
                        .IsUnique();

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Regix.Domain.Entities.Corporation", b =>
                {
                    b.Property<int>("CorporationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CorporationId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("date");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("date");

                    b.Property<string>("Imagen")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .UseCollation("Latin1_General_CI_AS");

                    b.Property<string>("NroDocument")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<int>("SoftPlanId")
                        .HasColumnType("int");

                    b.Property<string>("TypeDocument")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("CorporationId");

                    b.HasIndex("CountryId");

                    b.HasIndex("SoftPlanId");

                    b.HasIndex("Name", "NroDocument")
                        .IsUnique();

                    b.ToTable("Corporations");
                });

            modelBuilder.Entity("Regix.Domain.Entities.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CountryId"));

                    b.Property<string>("CodPhone")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .UseCollation("Latin1_General_CI_AS");

                    b.HasKey("CountryId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Regix.Domain.Entities.Manager", b =>
                {
                    b.Property<int>("ManagerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ManagerId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("CorporationId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FullName")
                        .HasMaxLength(101)
                        .HasColumnType("nvarchar(101)")
                        .UseCollation("Latin1_General_CI_AS");

                    b.Property<string>("Imagen")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Job")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NroDocument")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("TypeDocument")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("ManagerId");

                    b.HasIndex("CorporationId");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.HasIndex("FullName", "NroDocument")
                        .IsUnique()
                        .HasFilter("[FullName] IS NOT NULL");

                    b.ToTable("Managers");
                });

            modelBuilder.Entity("Regix.Domain.Entities.SoftPlan", b =>
                {
                    b.Property<int>("SoftPlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SoftPlanId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("Meses")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AS");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TrialsCount")
                        .HasColumnType("int");

                    b.HasKey("SoftPlanId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("SoftPlans");
                });

            modelBuilder.Entity("Regix.Domain.Entities.State", b =>
                {
                    b.Property<int>("StateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StateId"));

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .UseCollation("Latin1_General_CI_AS");

                    b.HasKey("StateId");

                    b.HasIndex("CountryId");

                    b.HasIndex("StateId");

                    b.HasIndex("Name", "CountryId")
                        .IsUnique();

                    b.ToTable("States");
                });

            modelBuilder.Entity("Regix.Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CorporationId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FullName")
                        .HasMaxLength(101)
                        .HasColumnType("nvarchar(101)");

                    b.Property<string>("JobPosition")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PhotoUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserFrom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CorporationId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Regix.Domain.Entities.UserRoleDetails", b =>
                {
                    b.Property<int>("UserRoleDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserRoleDetailsId"));

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("UserType")
                        .HasColumnType("int");

                    b.HasKey("UserRoleDetailsId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserRoleDetailsId");

                    b.HasIndex("UserType", "UserId")
                        .IsUnique()
                        .HasFilter("[UserType] IS NOT NULL AND [UserId] IS NOT NULL");

                    b.ToTable("UserRoleDetails");
                });

            modelBuilder.Entity("Regix.Domain.EntitiesGen.Anticonception", b =>
                {
                    b.Property<int>("AnticonceptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AnticonceptionId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AS");

                    b.HasKey("AnticonceptionId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Anticonceptions");
                });

            modelBuilder.Entity("Regix.Domain.EntitiesGen.Discapacidad", b =>
                {
                    b.Property<int>("DiscapacidadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiscapacidadId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AS");

                    b.HasKey("DiscapacidadId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Discapacidads");
                });

            modelBuilder.Entity("Regix.Domain.EntitiesGen.DocumentType", b =>
                {
                    b.Property<int>("DocumentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocumentTypeId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("DocumentName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AS");

                    b.HasKey("DocumentTypeId");

                    b.HasIndex("DocumentName")
                        .IsUnique();

                    b.ToTable("DocumentTypes");
                });

            modelBuilder.Entity("Regix.Domain.EntitiesGen.EstadoCivil", b =>
                {
                    b.Property<int>("EstadoCivilId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EstadoCivilId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AS");

                    b.HasKey("EstadoCivilId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("EstadoCivils");
                });

            modelBuilder.Entity("Regix.Domain.EntitiesGen.EtniaRaza", b =>
                {
                    b.Property<int>("EtniaRazaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EtniaRazaId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AS");

                    b.HasKey("EtniaRazaId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("EtniaRazas");
                });

            modelBuilder.Entity("Regix.Domain.EntitiesGen.IdentidadGenero", b =>
                {
                    b.Property<int>("IdentidadGeneroId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdentidadGeneroId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AS");

                    b.HasKey("IdentidadGeneroId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("IdentidadGeneros");
                });

            modelBuilder.Entity("Regix.Domain.EntitiesGen.Idioma", b =>
                {
                    b.Property<int>("IdiomaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdiomaId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AS");

                    b.HasKey("IdiomaId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Idiomas");
                });

            modelBuilder.Entity("Regix.Domain.EntitiesGen.Pharmacy", b =>
                {
                    b.Property<int>("PharmacyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PharmacyId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AS");

                    b.HasKey("PharmacyId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Pharmacies");
                });

            modelBuilder.Entity("Regix.Domain.EntitiesGen.Regular", b =>
                {
                    b.Property<int>("RegularId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RegularId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AS");

                    b.HasKey("RegularId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Regulars");
                });

            modelBuilder.Entity("Regix.Domain.EntitiesGen.SexoAsignado", b =>
                {
                    b.Property<int>("SexoAsignadoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SexoAsignadoId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AS");

                    b.HasKey("SexoAsignadoId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("SexoAsignados");
                });

            modelBuilder.Entity("Regix.Domain.EntitiesGen.Veteran", b =>
                {
                    b.Property<int>("VeteranId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VeteranId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AS");

                    b.HasKey("VeteranId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Veterans");
                });

            modelBuilder.Entity("Regix.Domain.EntitiesSoft.Ginecologico", b =>
                {
                    b.Property<Guid>("GinecologicoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<int>("AnticonceptionId")
                        .HasColumnType("int");

                    b.Property<int>("CorporationId")
                        .HasColumnType("int");

                    b.Property<int>("Gravida")
                        .HasColumnType("int");

                    b.Property<bool>("LaborComplications")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastCytologyPap")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastMenstruation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Menarquia")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Menopause")
                        .HasColumnType("bit");

                    b.Property<Guid>("PatientControlId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RegularId")
                        .HasColumnType("int");

                    b.Property<string>("WhyComplication")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("GinecologicoId");

                    b.HasIndex("AnticonceptionId");

                    b.HasIndex("CorporationId");

                    b.HasIndex("GinecologicoId");

                    b.HasIndex("PatientControlId");

                    b.HasIndex("RegularId");

                    b.ToTable("Ginecologicos");
                });

            modelBuilder.Entity("Regix.Domain.EntitiesSoft.Patient", b =>
                {
                    b.Property<Guid>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("Confirmed")
                        .HasColumnType("bit");

                    b.Property<int>("CorporationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<int>("DocumentTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("EmgAddress")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("EmgName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("EmgPhone")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("EmgRelation")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("EstadoCivilId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FullName")
                        .HasMaxLength(101)
                        .HasColumnType("nvarchar(101)");

                    b.Property<int>("IdentidadGeneroId")
                        .HasColumnType("int");

                    b.Property<int>("IdiomaId")
                        .HasColumnType("int");

                    b.Property<bool>("Interpreter")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Migrated")
                        .HasColumnType("bit");

                    b.Property<string>("Nro_Document")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Ocupacion")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<Guid>("PatientControlId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PharmacyId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneCell")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("PhoneHome")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Preferido")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SexoAsignadoId")
                        .HasColumnType("int");

                    b.HasKey("PatientId");

                    b.HasIndex("CorporationId");

                    b.HasIndex("DocumentTypeId");

                    b.HasIndex("EstadoCivilId");

                    b.HasIndex("IdentidadGeneroId");

                    b.HasIndex("IdiomaId");

                    b.HasIndex("PatientControlId");

                    b.HasIndex("PatientId");

                    b.HasIndex("PharmacyId");

                    b.HasIndex("SexoAsignadoId");

                    b.HasIndex("FullName", "CorporationId")
                        .IsUnique()
                        .HasFilter("[FullName] IS NOT NULL");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("Regix.Domain.EntitiesSoft.Patient2", b =>
                {
                    b.Property<Guid>("Patient2Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<bool>("Alcohol")
                        .HasColumnType("bit");

                    b.Property<bool>("Asthma")
                        .HasColumnType("bit");

                    b.Property<bool>("AutoimmuneDisease")
                        .HasColumnType("bit");

                    b.Property<bool>("Caffeine")
                        .HasColumnType("bit");

                    b.Property<bool>("Cancer")
                        .HasColumnType("bit");

                    b.Property<bool>("CoagulationDisorder")
                        .HasColumnType("bit");

                    b.Property<string>("ConsultationReason")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("CorporationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Diabetes")
                        .HasColumnType("bit");

                    b.Property<bool>("DietaryPattern")
                        .HasColumnType("bit");

                    b.Property<string>("DurationPattern")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Heartdisease")
                        .HasColumnType("bit");

                    b.Property<bool>("HousingSituation")
                        .HasColumnType("bit");

                    b.Property<bool>("Hyperlipidemia")
                        .HasColumnType("bit");

                    b.Property<bool>("Hypertension")
                        .HasColumnType("bit");

                    b.Property<bool>("InfectiousDiseases")
                        .HasColumnType("bit");

                    b.Property<bool>("Kidneydisease")
                        .HasColumnType("bit");

                    b.Property<bool>("LiverDisease")
                        .HasColumnType("bit");

                    b.Property<string>("ModifyingFactors")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("OccupationalHazards")
                        .HasColumnType("bit");

                    b.Property<string>("OtherPersonalMedical")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PainQuality")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PainSeverity")
                        .HasColumnType("int");

                    b.Property<Guid>("PatientControlId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("PhysicalActivity")
                        .HasColumnType("bit");

                    b.Property<bool>("PriorEpisodes")
                        .HasColumnType("bit");

                    b.Property<bool>("RecreationalDrugs")
                        .HasColumnType("bit");

                    b.Property<string>("RelatedSymptoms")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("Sleep")
                        .HasColumnType("bit");

                    b.Property<string>("SymptomLocation")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("ThyroidDisorder")
                        .HasColumnType("bit");

                    b.Property<bool>("Tobacco")
                        .HasColumnType("bit");

                    b.Property<string>("TypeCancer")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Patient2Id");

                    b.HasIndex("CorporationId");

                    b.HasIndex("Patient2Id");

                    b.HasIndex("PatientControlId");

                    b.ToTable("Patient2s");
                });

            modelBuilder.Entity("Regix.Domain.EntitiesSoft.Patient3", b =>
                {
                    b.Property<Guid>("Patient3Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<int>("CorporationId")
                        .HasColumnType("int");

                    b.Property<bool>("Cssrs")
                        .HasColumnType("bit");

                    b.Property<string>("CurrentTherapy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("DailyAid")
                        .HasColumnType("bit");

                    b.Property<int>("DiscapacidadId")
                        .HasColumnType("int");

                    b.Property<int>("EtniaRazaId")
                        .HasColumnType("int");

                    b.Property<string>("ExposureContagious")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Gad7")
                        .HasColumnType("bit");

                    b.Property<string>("IdeationDetails")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MentalDetail")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("MentalHealth")
                        .HasColumnType("bit");

                    b.Property<bool>("MobilityAid")
                        .HasColumnType("bit");

                    b.Property<string>("MobilityDetails")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Pain")
                        .HasColumnType("int");

                    b.Property<Guid>("PatientControlId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Phq9")
                        .HasColumnType("bit");

                    b.Property<string>("RecentTravel")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("SuicidalIdeation")
                        .HasColumnType("bit");

                    b.Property<string>("TestDetails")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("VeteranId")
                        .HasColumnType("int");

                    b.HasKey("Patient3Id");

                    b.HasIndex("CorporationId");

                    b.HasIndex("DiscapacidadId");

                    b.HasIndex("EtniaRazaId");

                    b.HasIndex("Patient3Id");

                    b.HasIndex("PatientControlId");

                    b.HasIndex("VeteranId");

                    b.ToTable("Patient3s");
                });

            modelBuilder.Entity("Regix.Domain.EntitiesSoft.PatientControl", b =>
                {
                    b.Property<Guid>("PatientControlId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<int>("CorporationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PatientControlId");

                    b.HasIndex("CorporationId");

                    b.HasIndex("PatientControlId");

                    b.ToTable("PatientControls");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Regix.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Regix.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Regix.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Regix.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Regix.Domain.EntitesSoftSec.Usuario", b =>
                {
                    b.HasOne("Regix.Domain.Entities.Corporation", "Corporation")
                        .WithMany("Usuarios")
                        .HasForeignKey("CorporationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Corporation");
                });

            modelBuilder.Entity("Regix.Domain.EntitesSoftSec.UsuarioRole", b =>
                {
                    b.HasOne("Regix.Domain.Entities.Corporation", "Corporation")
                        .WithMany("UsuarioRoles")
                        .HasForeignKey("CorporationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Regix.Domain.EntitesSoftSec.Usuario", "Usuario")
                        .WithMany("UsuarioRoles")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Corporation");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Regix.Domain.Entities.City", b =>
                {
                    b.HasOne("Regix.Domain.Entities.State", "State")
                        .WithMany("Cities")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("Regix.Domain.Entities.Corporation", b =>
                {
                    b.HasOne("Regix.Domain.Entities.Country", "Country")
                        .WithMany("Corporations")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Regix.Domain.Entities.SoftPlan", "SoftPlan")
                        .WithMany("Corporations")
                        .HasForeignKey("SoftPlanId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("SoftPlan");
                });

            modelBuilder.Entity("Regix.Domain.Entities.Manager", b =>
                {
                    b.HasOne("Regix.Domain.Entities.Corporation", "Corporation")
                        .WithMany("Managers")
                        .HasForeignKey("CorporationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Corporation");
                });

            modelBuilder.Entity("Regix.Domain.Entities.State", b =>
                {
                    b.HasOne("Regix.Domain.Entities.Country", "Country")
                        .WithMany("States")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Regix.Domain.Entities.User", b =>
                {
                    b.HasOne("Regix.Domain.Entities.Corporation", "Corporation")
                        .WithMany()
                        .HasForeignKey("CorporationId");

                    b.Navigation("Corporation");
                });

            modelBuilder.Entity("Regix.Domain.Entities.UserRoleDetails", b =>
                {
                    b.HasOne("Regix.Domain.Entities.User", "User")
                        .WithMany("UserRoleDetails")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Regix.Domain.EntitiesSoft.Ginecologico", b =>
                {
                    b.HasOne("Regix.Domain.EntitiesGen.Anticonception", "Anticonception")
                        .WithMany("Ginecologicos")
                        .HasForeignKey("AnticonceptionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Regix.Domain.Entities.Corporation", "Corporation")
                        .WithMany()
                        .HasForeignKey("CorporationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Regix.Domain.EntitiesSoft.PatientControl", "PatientControl")
                        .WithMany("Ginecologicos")
                        .HasForeignKey("PatientControlId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Regix.Domain.EntitiesGen.Regular", "Regular")
                        .WithMany("Ginecologicos")
                        .HasForeignKey("RegularId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Anticonception");

                    b.Navigation("Corporation");

                    b.Navigation("PatientControl");

                    b.Navigation("Regular");
                });

            modelBuilder.Entity("Regix.Domain.EntitiesSoft.Patient", b =>
                {
                    b.HasOne("Regix.Domain.Entities.Corporation", "Corporation")
                        .WithMany()
                        .HasForeignKey("CorporationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Regix.Domain.EntitiesGen.DocumentType", "DocumentType")
                        .WithMany("Patients")
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Regix.Domain.EntitiesGen.EstadoCivil", "EstadoCivil")
                        .WithMany("Patients")
                        .HasForeignKey("EstadoCivilId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Regix.Domain.EntitiesGen.IdentidadGenero", "IdentidadGenero")
                        .WithMany("Patients")
                        .HasForeignKey("IdentidadGeneroId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Regix.Domain.EntitiesGen.Idioma", "Idioma")
                        .WithMany("Patients")
                        .HasForeignKey("IdiomaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Regix.Domain.EntitiesSoft.PatientControl", "PatientControl")
                        .WithMany("Patients")
                        .HasForeignKey("PatientControlId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Regix.Domain.EntitiesGen.Pharmacy", "Pharmacy")
                        .WithMany("Patients")
                        .HasForeignKey("PharmacyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Regix.Domain.EntitiesGen.SexoAsignado", "SexoAsignado")
                        .WithMany("Patients")
                        .HasForeignKey("SexoAsignadoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Corporation");

                    b.Navigation("DocumentType");

                    b.Navigation("EstadoCivil");

                    b.Navigation("IdentidadGenero");

                    b.Navigation("Idioma");

                    b.Navigation("PatientControl");

                    b.Navigation("Pharmacy");

                    b.Navigation("SexoAsignado");
                });

            modelBuilder.Entity("Regix.Domain.EntitiesSoft.Patient2", b =>
                {
                    b.HasOne("Regix.Domain.Entities.Corporation", "Corporation")
                        .WithMany()
                        .HasForeignKey("CorporationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Regix.Domain.EntitiesSoft.PatientControl", "PatientControl")
                        .WithMany("Patient2s")
                        .HasForeignKey("PatientControlId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Corporation");

                    b.Navigation("PatientControl");
                });

            modelBuilder.Entity("Regix.Domain.EntitiesSoft.Patient3", b =>
                {
                    b.HasOne("Regix.Domain.Entities.Corporation", "Corporation")
                        .WithMany()
                        .HasForeignKey("CorporationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Regix.Domain.EntitiesGen.Discapacidad", "Discapacidad")
                        .WithMany("Patient3s")
                        .HasForeignKey("DiscapacidadId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Regix.Domain.EntitiesGen.EtniaRaza", "EtniaRaza")
                        .WithMany("Patient3s")
                        .HasForeignKey("EtniaRazaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Regix.Domain.EntitiesSoft.PatientControl", "PatientControl")
                        .WithMany("Patient3s")
                        .HasForeignKey("PatientControlId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Regix.Domain.EntitiesGen.Veteran", "Veteran")
                        .WithMany("Patient3s")
                        .HasForeignKey("VeteranId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Corporation");

                    b.Navigation("Discapacidad");

                    b.Navigation("EtniaRaza");

                    b.Navigation("PatientControl");

                    b.Navigation("Veteran");
                });

            modelBuilder.Entity("Regix.Domain.EntitiesSoft.PatientControl", b =>
                {
                    b.HasOne("Regix.Domain.Entities.Corporation", "Corporation")
                        .WithMany()
                        .HasForeignKey("CorporationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Corporation");
                });

            modelBuilder.Entity("Regix.Domain.EntitesSoftSec.Usuario", b =>
                {
                    b.Navigation("UsuarioRoles");
                });

            modelBuilder.Entity("Regix.Domain.Entities.Corporation", b =>
                {
                    b.Navigation("Managers");

                    b.Navigation("UsuarioRoles");

                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("Regix.Domain.Entities.Country", b =>
                {
                    b.Navigation("Corporations");

                    b.Navigation("States");
                });

            modelBuilder.Entity("Regix.Domain.Entities.SoftPlan", b =>
                {
                    b.Navigation("Corporations");
                });

            modelBuilder.Entity("Regix.Domain.Entities.State", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("Regix.Domain.Entities.User", b =>
                {
                    b.Navigation("UserRoleDetails");
                });

            modelBuilder.Entity("Regix.Domain.EntitiesGen.Anticonception", b =>
                {
                    b.Navigation("Ginecologicos");
                });

            modelBuilder.Entity("Regix.Domain.EntitiesGen.Discapacidad", b =>
                {
                    b.Navigation("Patient3s");
                });

            modelBuilder.Entity("Regix.Domain.EntitiesGen.DocumentType", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("Regix.Domain.EntitiesGen.EstadoCivil", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("Regix.Domain.EntitiesGen.EtniaRaza", b =>
                {
                    b.Navigation("Patient3s");
                });

            modelBuilder.Entity("Regix.Domain.EntitiesGen.IdentidadGenero", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("Regix.Domain.EntitiesGen.Idioma", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("Regix.Domain.EntitiesGen.Pharmacy", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("Regix.Domain.EntitiesGen.Regular", b =>
                {
                    b.Navigation("Ginecologicos");
                });

            modelBuilder.Entity("Regix.Domain.EntitiesGen.SexoAsignado", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("Regix.Domain.EntitiesGen.Veteran", b =>
                {
                    b.Navigation("Patient3s");
                });

            modelBuilder.Entity("Regix.Domain.EntitiesSoft.PatientControl", b =>
                {
                    b.Navigation("Ginecologicos");

                    b.Navigation("Patient2s");

                    b.Navigation("Patient3s");

                    b.Navigation("Patients");
                });
#pragma warning restore 612, 618
        }
    }
}
